@article{BURDALO2018130,
title = {The Information Flow Problem in multi-agent systems},
journal = {Engineering Applications of Artificial Intelligence},
volume = {70},
pages = {130-141},
year = {2018},
issn = {0952-1976},
doi = {https://doi.org/10.1016/j.engappai.2018.01.011},
url = {https://www.sciencedirect.com/science/article/pii/S0952197618300198},
author = {Luis Búrdalo and Andrés Terrasa and Vicente Julián and Ana García-Fornes},
keywords = {Multi-agent systems, Communication strategies, Agent communication, Information exchange},
abstract = {One of the problems related to the multi-agent systems area is the adequate exchange of information within the system. This problem is not only related to the availability of highly efficient and sophisticated message-passing mechanisms, which are in fact provided with by current multi-agent platforms, but also to the election of an appropriate communication strategy, which may also greatly influence the ability of the system to cope with the exchange of large amounts of data. Ideally, the communication strategy should be compatible with how the information flows in the system, that is, how agents share their knowledge with each other in order to fulfill the system-level goals. In this way, MAS designers must deal with the problem of analyzing the multi-agent system with respect the communication strategy that best suits the way the information flows in that particular system. This paper presents a formalization of this problem, which has been coined as the Information Flow Problem, and also presents a complete case study with an empirical evaluation involving four well-known communication strategies and eight typical multi-agent systems.}
}
@INPROCEEDINGS{1977-Temporal-Logic,
  author={Pnueli, Amir},
  booktitle={18th Annual Symposium on Foundations of Computer Science (sfcs 1977)},
  title={The temporal logic of programs},
  year={1977},
  volume={},
  number={},
  pages={46--57},
  keywords={Logic;Operating systems;Real time systems;Reasoning about programs;Stress;Power system modeling;Clocks;Programming profession;Safety;System recovery},
  doi={10.1109/SFCS.1977.32}
}
@Article{2022-Live-Synthesis,
author={Finkbeiner, Bernd
and Klein, Felix
and Metzger, Niklas},
title={Live synthesis},
journal={Innovations in Systems and Software Engineering},
year={2022},
month={Sep},
day={01},
volume={18},
number={3},
pages={443-454},
abstract={Synthesis automatically constructs an implementation that satisfies a given logical specification. In this paper, we study the live synthesis problem, where the synthesized implementation replaces an already running system. In addition to satisfying its own specification, the synthesized implementation must guarantee a sound transition from the previous implementation. This version of the synthesis problem is highly relevant in ``always-on'' applications, where updates happen while the system is running. To specify the correct handover between the old and new implementation, we introduce an extension of linear-time temporal logic (LTL) called LiveLTL. A LiveLTL specification defines separate requirements on the two implementations and ensures that the new implementation satisfies, in addition to its own requirements, any obligations left unfinished by the old implementation. For specifications in LiveLTL, we show that the live synthesis problem can be solved within the same complexity bound as standard reactive synthesis, i.e., in 2EXPTIME. Our experiments show the necessity of live synthesis for LiveLTL specifications created from benchmarks of SYNTCOMP and robot control.},
issn={1614-5054},
doi={10.1007/s11334-022-00447-5},
url={https://doi.org/10.1007/s11334-022-00447-5}
}
@article{10.1145/2491465.2491466,
author = {Salvaneschi, Guido and Ghezzi, Carlo and Pradella, Matteo},
title = {An Analysis of Language-Level Support for Self-Adaptive Software},
year = {2013},
issue_date = {July 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {2},
issn = {1556-4665},
url = {https://doi-org.ezproxy.uio.no/10.1145/2491465.2491466},
doi = {10.1145/2491465.2491466},
abstract = {Self-adaptive software has become increasingly important to address the new challenges of complex computing systems. To achieve adaptation, software must be designed and implemented by following suitable criteria, methods, and strategies. Past research has been mostly addressing adaptation by developing solutions at the software architecture level. This work, instead, focuses on finer-grain programming language-level solutions. We analyze three main linguistic approaches: metaprogramming, aspect-oriented programming, and context-oriented programming. The first two are general-purpose linguistic mechanisms, whereas the third is a specific and focused approach developed to support context-aware applications. This paradigm provides specialized language-level abstractions to implement dynamic adaptation and modularize behavioral variations in adaptive systems.The article shows how the three approaches can support the implementation of adaptive systems and compares the pros and cons offered by each solution.},
journal = {ACM Trans. Auton. Adapt. Syst.},
month = {jul},
articleno = {7},
numpages = {29},
keywords = {self-adaptive software, context-oriented programming, autonomic computing, Context}
}
@INPROCEEDINGS{2023-ACSOS-FRASP,
  author={Casadei, Roberto and Dente, Francesco and Aguzzi, Gianluca and Pianini, Danilo and Viroli, Mirko},
  booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)}, 
  title={Self-Organisation Programming: A Functional Reactive Macro Approach}, 
  year={2023},
  volume={},
  number={},
  pages={87-96},
  keywords={Processor scheduling;Computational modeling;Aggregates;Wearable computers;Sodium;Programming;Robot sensing systems;self-organising systems;self-organisation programming;multi-agent systems;emergent behaviour;emergence steering;functional reactive programming;aggregate computing},
  doi={10.1109/ACSOS58161.2023.00026}
}
@article{2016-Multi-Agent-Planning-under-Local-LTL-Specs-and-Event-Based-Sync,
title = {Multi-agent planning under local LTL specifications and event-based synchronization},
journal = {Automatica},
volume = {70},
pages = {239-248},
year = {2016},
issn = {0005-1098},
doi = {https://doi.org/10.1016/j.automatica.2016.04.006},
url = {https://www.sciencedirect.com/science/article/pii/S0005109816301285},
author = {Jana Tumova and Dimos V. Dimarogonas},
keywords = {Temporal logic, Finite state machines, Formal verification, Path planning, Synchronization, Decentralized control, Robot control},
abstract = {We study the problem of plan synthesis for multi-agent systems, to achieve complex, high-level, long-term goals that are assigned to each agent individually. As the agents might not be capable of satisfying their respective goals by themselves, requests for other agents’ collaborations are a part of the task descriptions. We consider that each agent is modeled as a discrete state-transition system and its task specification takes a form of a linear temporal logic formula. A traditional automata-based approach to multi-agent plan synthesis from such specifications builds on centralized team planning and full team synchronization after each agents’ discrete step, and thus suffers from extreme computational demands. We aim at reducing the computational complexity by decomposing the plan synthesis problem into finite horizon planning problems that are solved iteratively, upon the run of the agents. We introduce an event-based synchronization that allows our approach to efficiently adapt to different time durations of different agents’ discrete steps. We discuss the correctness of the solution and find assumptions, under which the proposed iterative algorithm leads to provable eventual satisfaction of the desired specifications.}
}
@ARTICLE{2021-Specification-Patterns-for-Robotic-Missions,
  author={Menghi, Claudio and Tsigkanos, Christos and Pelliccione, Patrizio and Ghezzi, Carlo and Berger, Thorsten},
  journal={IEEE Transactions on Software Engineering},
  title={Specification Patterns for Robotic Missions},
  year={2021},
  volume={47},
  number={10},
  pages={2208-2224},
  keywords={Software;Service robots;Natural languages;Software engineering;Tools;Task analysis;Mission specification;pattern catalog;robotic mission;model driven engineering},
  doi={10.1109/TSE.2019.2945329}
}
@InProceedings{2022-Runtime-Verification-Meets-Controller-Synthesis,
author="Azzopardi, Shaun
and Piterman, Nir
and Schneider, Gerardo",
editor="Margaria, Tiziana
and Steffen, Bernhard",
title="Runtime Verification Meets Controller Synthesis",
booktitle="Leveraging Applications of Formal Methods, Verification and Validation. Verification Principles",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="382--396",
abstract="Reactive synthesis guarantees correct-by-construction controllers from logical specifications, but is costly---2EXPTIME-complete in the size of the specification. In a practical setting, the desired controllers need to interact with an environment, but the more precise the model of the environment used for synthesis, the greater the cost of synthesis. This can be avoided by using suitable abstractions of the environment, but this in turn requires appropriate techniques to mediate between controllers and the real environment. Runtime verification can help here, with monitors acting as these mediators, and even as activators or orchestrators of the desired controllers. In this paper we survey literature for combinations of monitors with controller synthesis, and consider other potential combinations as future research directions.",
isbn="978-3-031-19849-6"
}

@INPROCEEDINGS{2023-ACSOS-CoADAPT,
  author={Dragan, Paul-Andrei and Metzger, Andreas and Pohl, Klaus},
  booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)}, 
  title={Towards the decentralized coordination of multiple self-adaptive systems}, 
  year={2023},
  volume={},
  number={},
  pages={107-116},
  keywords={Constraint optimization;Cloud computing;Runtime;Scalability;Control systems;Planning;Distributed computing;self-adaptive systems;coordination;distributed constraint optimization;cloud computing},
  doi={10.1109/ACSOS58161.2023.00028}
}
@InProceedings{2018-Multi-robot-LTL-Planning-Under-Uncertainty,
author="Menghi, Claudio
and Garcia, Sergio
and Pelliccione, Patrizio
and Tumova, Jana",
editor="Havelund, Klaus
and Peleska, Jan
and Roscoe, Bill
and de Vink, Erik",
title="Multi-robot LTL Planning Under Uncertainty",
booktitle="Formal Methods",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="399--417",
abstract="Robot applications are increasingly based on teams of robots that collaborate to perform a desired mission. Such applications ask for decentralized techniques that allow for tractable automated planning. Another aspect that current robot applications must consider is partial knowledge about the environment in which the robots are operating and the uncertainty associated with the outcome of the robots' actions.",
isbn="978-3-319-95582-7"
}

