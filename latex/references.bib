@article{BURDALO2018130,
title = {The Information Flow Problem in multi-agent systems},
journal = {Engineering Applications of Artificial Intelligence},
volume = {70},
pages = {130-141},
year = {2018},
issn = {0952-1976},
doi = {https://doi.org/10.1016/j.engappai.2018.01.011},
url = {https://www.sciencedirect.com/science/article/pii/S0952197618300198},
author = {Luis Búrdalo and Andrés Terrasa and Vicente Julián and Ana García-Fornes},
keywords = {Multi-agent systems, Communication strategies, Agent communication, Information exchange},
abstract = {One of the problems related to the multi-agent systems area is the adequate exchange of information within the system. This problem is not only related to the availability of highly efficient and sophisticated message-passing mechanisms, which are in fact provided with by current multi-agent platforms, but also to the election of an appropriate communication strategy, which may also greatly influence the ability of the system to cope with the exchange of large amounts of data. Ideally, the communication strategy should be compatible with how the information flows in the system, that is, how agents share their knowledge with each other in order to fulfill the system-level goals. In this way, MAS designers must deal with the problem of analyzing the multi-agent system with respect the communication strategy that best suits the way the information flows in that particular system. This paper presents a formalization of this problem, which has been coined as the Information Flow Problem, and also presents a complete case study with an empirical evaluation involving four well-known communication strategies and eight typical multi-agent systems.}
}
@Article{2022-Live-Synthesis,
author={Finkbeiner, Bernd
and Klein, Felix
and Metzger, Niklas},
title={Live synthesis},
journal={Innovations in Systems and Software Engineering},
year={2022},
month={Sep},
day={01},
volume={18},
number={3},
pages={443-454},
abstract={Synthesis automatically constructs an implementation that satisfies a given logical specification. In this paper, we study the live synthesis problem, where the synthesized implementation replaces an already running system. In addition to satisfying its own specification, the synthesized implementation must guarantee a sound transition from the previous implementation. This version of the synthesis problem is highly relevant in ``always-on'' applications, where updates happen while the system is running. To specify the correct handover between the old and new implementation, we introduce an extension of linear-time temporal logic (LTL) called LiveLTL. A LiveLTL specification defines separate requirements on the two implementations and ensures that the new implementation satisfies, in addition to its own requirements, any obligations left unfinished by the old implementation. For specifications in LiveLTL, we show that the live synthesis problem can be solved within the same complexity bound as standard reactive synthesis, i.e., in 2EXPTIME. Our experiments show the necessity of live synthesis for LiveLTL specifications created from benchmarks of SYNTCOMP and robot control.},
issn={1614-5054},
doi={10.1007/s11334-022-00447-5},
url={https://doi.org/10.1007/s11334-022-00447-5}
}
@article{10.1145/2491465.2491466,
author = {Salvaneschi, Guido and Ghezzi, Carlo and Pradella, Matteo},
title = {An Analysis of Language-Level Support for Self-Adaptive Software},
year = {2013},
issue_date = {July 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {2},
issn = {1556-4665},
url = {https://doi-org.ezproxy.uio.no/10.1145/2491465.2491466},
doi = {10.1145/2491465.2491466},
abstract = {Self-adaptive software has become increasingly important to address the new challenges of complex computing systems. To achieve adaptation, software must be designed and implemented by following suitable criteria, methods, and strategies. Past research has been mostly addressing adaptation by developing solutions at the software architecture level. This work, instead, focuses on finer-grain programming language-level solutions. We analyze three main linguistic approaches: metaprogramming, aspect-oriented programming, and context-oriented programming. The first two are general-purpose linguistic mechanisms, whereas the third is a specific and focused approach developed to support context-aware applications. This paradigm provides specialized language-level abstractions to implement dynamic adaptation and modularize behavioral variations in adaptive systems.The article shows how the three approaches can support the implementation of adaptive systems and compares the pros and cons offered by each solution.},
journal = {ACM Trans. Auton. Adapt. Syst.},
month = {jul},
articleno = {7},
numpages = {29},
keywords = {self-adaptive software, context-oriented programming, autonomic computing, Context}
}
@INPROCEEDINGS{2023-ACSOS-FRASP,
  author={Casadei, Roberto and Dente, Francesco and Aguzzi, Gianluca and Pianini, Danilo and Viroli, Mirko},
  booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)}, 
  title={Self-Organisation Programming: A Functional Reactive Macro Approach}, 
  year={2023},
  volume={},
  number={},
  pages={87-96},
  keywords={Processor scheduling;Computational modeling;Aggregates;Wearable computers;Sodium;Programming;Robot sensing systems;self-organising systems;self-organisation programming;multi-agent systems;emergent behaviour;emergence steering;functional reactive programming;aggregate computing},
  doi={10.1109/ACSOS58161.2023.00026}
}
@INPROCEEDINGS{2023-ACSOS-CoADAPT,
  author={Dragan, Paul-Andrei and Metzger, Andreas and Pohl, Klaus},
  booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)}, 
  title={Towards the decentralized coordination of multiple self-adaptive systems}, 
  year={2023},
  volume={},
  number={},
  pages={107-116},
  keywords={Constraint optimization;Cloud computing;Runtime;Scalability;Control systems;Planning;Distributed computing;self-adaptive systems;coordination;distributed constraint optimization;cloud computing},
  doi={10.1109/ACSOS58161.2023.00028}
}
