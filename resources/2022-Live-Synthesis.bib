@Article{2022-Live-Synthesis,
author={Finkbeiner, Bernd
and Klein, Felix
and Metzger, Niklas},
title={Live synthesis},
journal={Innovations in Systems and Software Engineering},
year={2022},
month={Sep},
day={01},
volume={18},
number={3},
pages={443-454},
abstract={Synthesis automatically constructs an implementation that satisfies a given logical specification. In this paper, we study the live synthesis problem, where the synthesized implementation replaces an already running system. In addition to satisfying its own specification, the synthesized implementation must guarantee a sound transition from the previous implementation. This version of the synthesis problem is highly relevant in ``always-on'' applications, where updates happen while the system is running. To specify the correct handover between the old and new implementation, we introduce an extension of linear-time temporal logic (LTL) called LiveLTL. A LiveLTL specification defines separate requirements on the two implementations and ensures that the new implementation satisfies, in addition to its own requirements, any obligations left unfinished by the old implementation. For specifications in LiveLTL, we show that the live synthesis problem can be solved within the same complexity bound as standard reactive synthesis, i.e., in 2EXPTIME. Our experiments show the necessity of live synthesis for LiveLTL specifications created from benchmarks of SYNTCOMP and robot control.},
issn={1614-5054},
doi={10.1007/s11334-022-00447-5},
url={https://doi.org/10.1007/s11334-022-00447-5}
}
